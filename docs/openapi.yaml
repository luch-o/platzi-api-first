openapi: 3.0.4
info:
  title: API First
  version: 1.0.0
  description: API First course watch along API

servers:
  - url: http://localhost:8000

components:
  schemas:
    HelloResponse:
      type: object
      properties:
        message:
          type: string
          example: Hello World
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Validation failed: Email address is required and must be valid'
    User:
      type: object
      required:
        - name
        - email
        - age
      properties:
        id:
          type: integer
          readOnly: true
          example: 12847
        name:
          type: string
          example: Sarah Martinez
          minLength: 2
        email:
          type: string
          format: email
          example: sarah.martinez@techcorp.com
        age:
          type: integer
          example: 28
          minimum: 18
    Product:
      type: object
      required:
        - name
        - price
        - category
      properties:
        id:
          type: integer
          readOnly: true
          example: 5429
        name:
          type: string
          example: Apple MacBook Pro 14-inch M3
        price:
          type: number
          example: 1999.99
        category:
          type: string
          enum:
            - Electronics
            - Clothing
            - Books
            - Food
            - Other
        description:
          type: string
          example: Professional laptop with M3 chip, 16GB RAM, 512GB SSD. Perfect for developers, designers, and content creators. Features stunning Liquid Retina XDR display.
        tags:
          type: array
          minItems: 1
          items:
            type: string
            example: laptop
        stock:
          type: boolean
          example: true
        specifications:
          type: object
          description: Specifications of the product
          example:
            brand: Apple
            model: MacBook Pro 14-inch M3
            processor: M3
            memory: 16GB
            storage: 512GB
            display: Liquid Retina XDR
        ratings:
          type: array
          items:
            type: object
            properties:
              score:
                type: number
                example: 4.8
                minimum: 0
                maximum: 5
              comment:
                type: string
                example: Outstanding performance and build quality. The M3 chip handles everything I throw at it effortlessly. Battery life is incredible!
                minLength: 10
                maxLength: 200
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /hello:
    get:
      summary: Hello World
      description: Returns a simple "Hello World" message
      responses:
        '200':
          description: A simple "Hello World" message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'

  /auth/login:
    post:
      summary: Login
      description: Logs in a user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    post:
      summary: Create a new user
      description: Creates a new user with the given information
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    get:
      summary: Get a user by ID
      description: Returns a user by their ID
      tags:
        - Users
      security:
        - JWT: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update a user by ID
      description: Updates a user by their ID
      tags:
        - Users
      security:
        - JWT: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products:
    get:
      summary: Get all products
      description: Returns a list of all products
      tags:
        - Products
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Create a new product
      description: Creates a new product with the given information
      tags:
        - Products
      security:
        - JWT: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products/{id}:
    get:
      summary: Get a product by ID
      description: Returns a product by its ID
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update a product by ID
      description: Updates a product by its ID
      tags:
        - Products
      security:
        - JWT: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a product by ID
      description: Deletes a product by its ID
      tags:
        - Products
      security:
        - JWT: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Product deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'