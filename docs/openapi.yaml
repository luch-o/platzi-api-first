openapi: 3.1.1
info:
  title: API First
  version: 1.0.0
  description: API First course watch along API

servers:
  - url: http://localhost:8000

components:
  schemas:
    HelloResponse:
      type: object
      properties:
        message:
          type: string
          example: Hello World
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: Error message
    UserPayload:
      $ref: '#/x-internal-schemas/UserBase'
    User:
      allOf:
        - $ref: '#/x-internal-schemas/UserBase'
        - type: object
          properties:
            id:
              type: integer
              example: 1
    ProductPayload:
      $ref: '#/x-internal-schemas/ProductBase'
    Product:
      allOf:
        - $ref: '#/x-internal-schemas/ProductBase'
        - type: object
          properties:
            id:
              type: integer
              example: 1
# Internal schemas are used to avoid duplication of schemas and are not shown in the UI
x-internal-schemas:
  UserBase:
    type: object
    required:
      - name
      - email
      - age
    properties:
      name:
        type: string
        example: John Doe
        minLength: 2
      email:
        type: string
        format: email
        example: john.doe@example.com
      age:
        type: integer
        example: 30
        minimum: 18
  ProductBase:
    type: object
    required:
      - name
      - price
      - category
    properties:
      name:
        type: string
        example: Product 1
      price:
        type: number
        example: 100
      category:
        type: string
        enum:
          - Electronics
          - Clothing
          - Books
          - Food
          - Other
      description:
        type: string
        example: This is a product description
      tags:
        type: array
        minItems: 1
        items:
          type: string
          example: Electronics
      stock:
        type: boolean
        example: true
      additionalProperties:
        type: object
        description: Additional properties, for custom additional information
      ratings:
        type: array
        items:
          type: object
          properties:
            score:
              type: number
              example: 4.5
              minimum: 0
              maximum: 5
            comment:
              type: string
              example: This is a comment
              minLength: 10
              maxLength: 200

paths:
  /hello:
    get:
      summary: Hello World
      description: Returns a simple "Hello World" message
      responses:
        '200':
          description: A simple "Hello World" message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'

  /users:
    post:
      summary: Create a new user
      description: Creates a new user with the given information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPayload'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    get:
      summary: Get a user by ID
      description: Returns a user by their ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update a user by ID
      description: Updates a user by their ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPayload'
      responses:
        '200':
          description: User updated successfully
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products:
    get:
      summary: Get all products
      description: Returns a list of all products
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Create a new product
      description: Creates a new product with the given information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductPayload'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products/{id}:
    get:
      summary: Get a product by ID
      description: Returns a product by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update a product by ID
      description: Updates a product by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductPayload'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a product by ID
      description: Deletes a product by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'